# .github/workflows/cmake-release.yml
name: CMake Release Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.8.1'
        host: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}
        target: 'desktop'
        arch: ${{ matrix.os == 'windows-latest' && 'win64_mingw' || 'linux_gcc_64' }}
        path: ${{ matrix.os == 'windows-latest' && 'C:\\Qt' || '/opt/Qt' }}
        modules: 'qtcharts'
        tools: ${{ matrix.os == 'windows-latest' && 'tools_mingw1310' || '' }}
        install-deps: 'true'
        
    - name: Add MinGW to PATH (Windows only)
      if: matrix.os == 'windows-latest'
      run: |
       echo "C:\\Qt\\Tools\\mingw1310\\bin" >> $Env:GITHUB_PATH
      shell: powershell
       
    - name: Verify MinGW (Windows only)
      if: matrix.os == 'windows-latest'
      run: |
       gcc --version
       g++ --version
      shell: cmd
      
    - name: Check MinGW Path (Windows only)
      if: matrix.os == 'windows-latest'
      run: |
        if exist "C:\Qt\Tools\mingw1310\bin\gcc.exe" (
          echo "gcc.exe found."
        ) else (
         echo "gcc.exe not found." 
         exit 1
        )
        if exist "C:\Qt\Tools\mingw1310\bin\g++.exe" (
         echo "g++.exe found."
        ) else (
          echo "g++.exe not found."
          exit 1
        )
      shell: cmd
     
    - name: Check CMake Version
      run: cmake --version

    - name: Check Qt Version (Windows)
      if: matrix.os == 'windows-latest'
      run: C:/Qt/6.8.1/mingw_64/bin/qmake.exe --version
      shell: cmd

    - name: Check Qt Version (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: /opt/Qt/6.8.1/gcc_64/bin/qmake --version
      
    - name: Configure CMake for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_PREFIX_PATH=/opt/Qt/6.8.1/gcc_64 \
          -G "Unix Makefiles"

    - name: Configure CMake for Windows
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B build -S . ^
          -DCMAKE_BUILD_TYPE=Release ^
           -DCMAKE_PREFIX_PATH=C:/Qt/6.8.1/mingw_64 ^
           -G "MinGW Makefiles"
      shell: cmd
      
    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}

    - name: Run Tests
      run: ctest --output-on-failure --build-config ${{ env.BUILD_TYPE }}
      working-directory: build

    - name: Upload Build Artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: ZapretGUI-${{ matrix.os }}-${{ env.BUILD_TYPE }}
        path: build/

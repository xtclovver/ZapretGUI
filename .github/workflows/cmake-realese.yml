name: Забилдить и создать релиз

on:
  push:
    branches: [patch]
  pull_request:
    branches: [main]

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic-release.outputs.new-version }}
      is-prerelease: ${{ steps.check-branch.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          npm install -g semantic-release@21.1.1
          npm install -g @semantic-release/changelog@6.0.3
          npm install -g @semantic-release/git@10.0.4
  
      - name: Check branch type
        id: check-branch
        run: |
          if [ "$GITHUB_REF_NAME" == "patch" ]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
      - name: Run Semantic Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x  # Включить отладку
          
          # Добавляем базовую конфигурацию
          echo "module.exports = {
            branches: ['main', {name: 'patch', prerelease: true}],
            plugins: [
              '@semantic-release/commit-analyzer',
              '@semantic-release/release-notes-generator',
              '@semantic-release/changelog',
              '@semantic-release/github',
              '@semantic-release/git'
            ]
          }" > release.config.js
          
          # Запускаем semantic-release
          OUTPUT=$(npx semantic-release --dry-run --no-ci)
          echo "$OUTPUT"
          
          # Извлекаем версию
          VERSION=$(echo "$OUTPUT" | grep -oP 'next release version is \K.*')
          
          if [ -z "$VERSION" ]; then
            echo "::warning::No new version detected"
            echo "new-version=0.0.0" >> $GITHUB_OUTPUT
          else
            echo "new-version=$VERSION" >> $GITHUB_OUTPUT
          fi

  build:
    needs: determine-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Установка MSYS2 и MinGW
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-cninja
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-qt6-base
            mingw-w64-x86_64-qt6-declarative
          pacboy: >
            toolchain:p
            cmake:p
            ninja:p

      - name: Настройка среды на Windows
        if: runner.os == 'Windows'
        shell: bash
        run: echo "D:/a/_temp/msys64/mingw64/bin" >> $GITHUB_PATH
          
      - name: Установка зависимостей на Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake qt6-base-dev qt6-base-dev-tools qt6-declarative-dev

      - name: Настройка PATH для Qt на Linux (GHEnv)
        if: runner.os == 'Linux'
        run: echo "/usr/lib/qt6/bin" >> $GITHUB_PATH

      - name: Установка зависимостей на macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake qt

      - name: Настройка PATH для Qt на macOS
        if: runner.os == 'macOS'
        run: echo "$(brew --prefix qt)/bin" >> $GITHUB_PATH
        
      - name: Сборка проекта на Windows
        if: runner.os == 'Windows'
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_PREFIX_PATH=D:/a/_temp/msys64 ..
          cp D:/a/_temp/msys64/mingw64/bin/Qt6Core.dll .
          cp D:/a/_temp/msys64/mingw64/bin/Qt6Gui.dll .
          cp D:/a/_temp/msys64/mingw64/bin/Qt6Widgets.dll .
          cmake --build . --config Release 

      - name: Сборка проекта на Linux и macOS
        if: runner.os != 'Windows'
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
  
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}-${{ needs.determine-version.outputs.version }}
          path: build/

  publish-release:
    needs: [determine-version, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ needs.determine-version.outputs.is-prerelease }}
          tag_name: v${{ needs.determine-version.outputs.version }}
          name: Release v${{ needs.determine-version.outputs.version }}
          body: |
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Artifacts
            Built for:
            - Windows
            - Linux
            - macOS
          files: |
            artifacts/build-*-${{ needs.determine-version.outputs.version }}/*

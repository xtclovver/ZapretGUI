name: Semantic Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [patch]

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.semver.outputs.version }}
      release-type: ${{ steps.analyze.outputs.release-type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Analyze commits
        id: analyze
        uses: incremental-actions/conventional-commit@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate SemVer
        id: semver
        uses: cycjimmy/semantic-release-action@v3
        with:
          branches: |
            main
            patch
          preset: conventionalcommits
          dry-run: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: versioning
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Установка MSYS2 и MinGW
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-cninja
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-qt6-base
            mingw-w64-x86_64-qt6-declarative
          pacboy: >
            toolchain:p
            cmake:p
            ninja:p

      - name: Настройка среды на Windows
        if: runner.os == 'Windows'
        shell: bash
        run: echo "D:/a/_temp/msys64/mingw64/bin" >> $GITHUB_PATH
          
      - name: Установка зависимостей на Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake qt6-base-dev qt6-base-dev-tools qt6-declarative-dev

      - name: Настройка PATH для Qt на Linux (GHEnv)
        if: runner.os == 'Linux'
        run: echo "/usr/lib/qt6/bin" >> $GITHUB_PATH

      - name: Установка зависимостей на macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake qt

      - name: Настройка PATH для Qt на macOS
        if: runner.os == 'macOS'
        run: echo "$(brew --prefix qt)/bin" >> $GITHUB_PATH
        
      - name: Сборка проекта на Windows
        if: runner.os == 'Windows'
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_PREFIX_PATH=D:/a/_temp/msys64 ..
          cp D:/a/_temp/msys64/mingw64/bin/Qt6Core.dll .
          cp D:/a/_temp/msys64/mingw64/bin/Qt6Gui.dll .
          cp D:/a/_temp/msys64/mingw64/bin/Qt6Widgets.dll .
          cmake --build . --config Release 

      - name: Сборка проекта на Linux и macOS
        if: runner.os != 'Windows'
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
      # Выгрузка артефактов
      - name: Выгрузка артефактов
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}
          path: build/

      - name: Добавить версию в артефакты
        run: echo "${{ needs.versioning.outputs.semver }}" > version.txt

  release:
    needs: [versioning, build]
    runs-on: ubuntu-latest
    steps:
      - name: Создать релиз
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ github.ref == 'refs/heads/patch' }}
          tag_name: ${{ needs.versioning.outputs.semver }}
          name: Release ${{ needs.versioning.outputs.semver }}
          body: |
            ${{ steps.analyze.outputs.notes }}
          files: artifacts/*

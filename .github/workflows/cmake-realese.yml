name: Build Qt Project

on:
  push:
    branches:
      - main
      - patch
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Установка MSYS2 и MinGW
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-cninja
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-qt6-base
            mingw-w64-x86_64-qt6-declarative
          pacboy: >
            toolchain:p
            cmake:p
            ninja:p

      - name: Настройка среды на Windows
        if: runner.os == 'Windows'
        shell: bash
        run: echo "D:/a/_temp/msys64/mingw64/bin" >> $GITHUB_PATH

      - name: Установка зависимостей на Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake qt6-base-dev qt6-base-dev-tools qt6-declarative-dev

      - name: Настройка PATH для Qt на Linux (GHEnv)
        if: runner.os == 'Linux'
        run: echo "/usr/lib/qt6/bin" >> $GITHUB_PATH

      - name: Установка зависимостей на macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake qt

      - name: Настройка PATH для Qt на macOS
        if: runner.os == 'macOS'
        run: echo "$(brew --prefix qt)/bin" >> $GITHUB_PATH

      - name: Сборка проекта на Windows
        if: runner.os == 'Windows'
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_PREFIX_PATH=D:/a/_temp/msys64 ..
          cp D:/a/_temp/msys64/mingw64/bin/Qt6Core.dll .
          cp D:/a/_temp/msys64/mingw64/bin/Qt6Gui.dll .
          cp D:/a/_temp/msys64/mingw64/bin/Qt6Widgets.dll .
          cmake --build . --config Release

      - name: Сборка проекта на Linux и macOS
        if: runner.os != 'Windows'
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release

      # Выгрузка артефактов
      - name: Выгрузка артефактов
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}
          path: build/
  release:
    needs: build
    permissions: write-all
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Get PR description
        if: github.event_name == 'pull_request'
        id: pr_description
        run: |
          DESCRIPTION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.event.pull_request.url }}" | jq -r '.body')
          echo "::set-output name=description::$DESCRIPTION"

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: minor

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: |
            ${{ steps.pr_description.outputs.description && format('PR Description: {0}', steps.pr_description.outputs.description) || '' }}
            ${{ !steps.pr_description.outputs.description && format('Commits: {0}', join(github.event.commits.*.message, '\n')) || '' }}
          draft: false
          prerelease: false

      - name: Скачивание артефактов
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Загрузка артефактов в релиз
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/
          asset_name: ${{ github.event.repository.name }}-${{ matrix.os }}-${{ steps.tag_version.outputs.new_tag }}.zip
          asset_content_type: application/zip
          
  pre-release:
    needs: build
    permissions: write-all
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/patch'
    steps:
      - uses: actions/checkout@v3

      - name: Get latest release version
        id: latest_release
        uses: abatilo/release-info-action@v1.6.3
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}

      - name: Set pre-release version
        id: pre_release_version
        run: |
          LATEST_VERSION="${{ steps.latest_release.outputs.tag_name }}"
          # Remove 'v' prefix if exists
          LATEST_VERSION_NO_PREFIX="${LATEST_VERSION#"v"}"

          # Increment pre-release number or set to 1 if not existing
          if [[ "$LATEST_VERSION_NO_PREFIX" == *-pre* ]]; then
            BASE_VERSION=$(echo "$LATEST_VERSION_NO_PREFIX" | sed 's/-pre.*//')
            PRE_NUMBER=$(echo "$LATEST_VERSION_NO_PREFIX" | grep -oP '(?<=-pre)\d+$')
            NEW_PRE_NUMBER=$((PRE_NUMBER + 1))
            NEW_VERSION="$BASE_VERSION-pre$NEW_PRE_NUMBER"
          else
            NEW_VERSION="$LATEST_VERSION_NO_PREFIX-pre1"
          fi

          echo "::set-output name=version::$NEW_VERSION"
          echo "Pre-release version: $NEW_VERSION"

      - name: Создание пре-релиза
        id: create_pre_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.pre_release_version.outputs.version }}
          release_name: Pre-Release v${{ steps.pre_release_version.outputs.version }}
          draft: false
          prerelease: true
          body: |
            Commits:
            ${{ join(github.event.commits.*.message, '\n') }}

      - name: Скачивание артефактов
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Загрузка артефактов в пре-релиз
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_pre_release.outputs.upload_url }}
          asset_path: ./artifacts/
          asset_name: ${{ github.event.repository.name }}-${{ matrix.os }}-v${{ steps.pre_release_version.outputs.version }}.zip
          asset_content_type: application/zip
